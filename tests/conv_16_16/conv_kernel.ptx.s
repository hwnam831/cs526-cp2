//
// Generated by LLVM NVPTX Back-End
//

.version 5.0
.target sm_61, texmode_independent
.address_size 64

	// .globl	conv                    // -- Begin function conv
                                        // @conv
.entry conv(
	.param .u64 .ptr .global .align 4 conv_param_0,
	.param .u64 .ptr .global .align 4 conv_param_1,
	.param .u64 .ptr .global .align 4 conv_param_2,
	.param .u32 conv_param_3,
	.param .u32 conv_param_4,
	.param .u32 conv_param_5,
	.param .u32 conv_param_6
)
{
	.reg .pred 	%p<3>;
	.reg .f32 	%f<12>;
	.reg .b32 	%r<14>;
	.reg .b64 	%rd<33>;

// %bb.0:                               // %entry
	ld.param.u64 	%rd13, [conv_param_2];
	ld.param.u64 	%rd14, [conv_param_0];
	ld.param.u64 	%rd15, [conv_param_1];
	mov.u32 	%r4, %ctaid.y;
	shl.b32 	%r5, %r4, 4;
	mov.u32 	%r6, %tid.y;
	add.s32 	%r7, %r5, %r6;
	cvt.u64.u32 	%rd1, %r7;
	ld.param.s32 	%rd16, [conv_param_5];
	ld.param.s32 	%rd17, [conv_param_6];
	mov.u32 	%r8, %ctaid.x;
	shl.b32 	%r9, %r8, 4;
	mov.u32 	%r10, %tid.x;
	add.s32 	%r11, %r9, %r10;
	cvt.u64.u32 	%rd2, %r11;
	add.s64 	%rd18, %rd17, %rd1;
	mul.lo.s64 	%rd19, %rd18, 4112;
	add.s64 	%rd20, %rd19, %rd16;
	add.s64 	%rd21, %rd20, %rd2;
	shl.b64 	%rd22, %rd21, 2;
	add.s64 	%rd30, %rd14, %rd22;
	add.s64 	%rd29, %rd15, 4;
	mov.f32 	%f11, 0f00000000;
	mov.u32 	%r13, 0;
LBB0_1:                                 // %for.cond1.preheader
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_2 Depth 2
	mov.u64 	%rd32, 0;
	mov.u64 	%rd31, %rd30;
LBB0_2:                                 // %for.body3
                                        //   Parent Loop BB0_1 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ld.global.f32 	%f5, [%rd31];
	add.s64 	%rd24, %rd29, %rd32;
	ld.global.f32 	%f6, [%rd24+-4];
	fma.rn.f32 	%f7, %f5, %f6, %f11;
	ld.global.f32 	%f8, [%rd31+-4];
	ld.global.f32 	%f9, [%rd24];
	fma.rn.f32 	%f11, %f8, %f9, %f7;
	add.s64 	%rd32, %rd32, 8;
	cvt.u32.u64 	%r12, %rd32;
	add.s64 	%rd31, %rd31, -8;
	setp.ne.s32 	%p1, %r12, 64;
	@%p1 bra 	LBB0_2;
// %bb.3:                               // %for.inc22
                                        //   in Loop: Header=BB0_1 Depth=1
	add.s32 	%r13, %r13, 1;
	add.s64 	%rd30, %rd30, -16448;
	add.s64 	%rd29, %rd29, 64;
	setp.ne.s32 	%p2, %r13, 16;
	@%p2 bra 	LBB0_1;
// %bb.4:                               // %for.end24
	shl.b64 	%rd25, %rd1, 12;
	add.s64 	%rd26, %rd25, %rd2;
	shl.b64 	%rd27, %rd26, 2;
	add.s64 	%rd28, %rd13, %rd27;
	st.global.f32 	[%rd28], %f11;
	ret;
                                        // -- End function
}
