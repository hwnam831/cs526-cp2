//
// Generated by LLVM NVPTX Back-End
//

.version 5.0
.target sm_61, texmode_independent
.address_size 64

	// .globl	conv                    // -- Begin function conv
                                        // @conv
.entry conv(
	.param .u64 .ptr .global .align 4 conv_param_0,
	.param .u64 .ptr .global .align 4 conv_param_1,
	.param .u64 .ptr .global .align 4 conv_param_2,
	.param .u32 conv_param_3,
	.param .u32 conv_param_4,
	.param .u32 conv_param_5,
	.param .u32 conv_param_6
)
{
	.reg .pred 	%p<7>;
	.reg .f32 	%f<25>;
	.reg .b32 	%r<41>;
	.reg .b64 	%rd<43>;

// %bb.0:                               // %entry
	ld.param.u32 	%r12, [conv_param_6];
	ld.param.u64 	%rd17, [conv_param_2];
	setp.lt.s32 	%p1, %r12, 1;
	mov.f32 	%f23, 0f00000000;
	mov.u32 	%r33, %ctaid.y;
	mov.u32 	%r34, %tid.y;
	mov.u32 	%r35, %ctaid.x;
	mov.u32 	%r36, %tid.x;
	@%p1 bra 	LBB0_9;
// %bb.1:                               // %for.cond1.preheader.lr.ph
	ld.param.u32 	%r11, [conv_param_5];
	ld.param.u64 	%rd16, [conv_param_1];
	ld.param.u64 	%rd15, [conv_param_0];
	cvt.u64.u32 	%rd1, %r12;
	cvt.s64.s32 	%rd2, %r11;
	and.b32  	%r1, %r11, 1;
	and.b32  	%r2, %r11, -2;
	add.s64 	%rd3, %rd16, 4;
	mov.f32 	%f23, 0f00000000;
	mov.u32 	%r37, 0;
	setp.lt.s32 	%p2, %r11, 1;
	setp.eq.s32 	%p3, %r11, 1;
	setp.eq.s32 	%p5, %r1, 0;
	mov.u64 	%rd40, %rd1;
	mov.u32 	%r38, %r37;
	bra.uni 	LBB0_2;
LBB0_8:                                 // %for.inc22
                                        //   in Loop: Header=BB0_2 Depth=1
	add.s32 	%r38, %r38, 1;
	add.s32 	%r37, %r37, 32;
	add.s64 	%rd40, %rd40, -1;
	setp.ne.s32 	%p6, %r38, %r12;
	@%p6 bra 	LBB0_2;
	bra.uni 	LBB0_9;
LBB0_2:                                 // %for.cond1.preheader
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_5 Depth 2
	@%p2 bra 	LBB0_8;
// %bb.3:                               // %for.body3.lr.ph
                                        //   in Loop: Header=BB0_2 Depth=1
	shl.b32 	%r16, %r33, 4;
	add.s32 	%r18, %r16, %r34;
	cvt.u64.u32 	%rd6, %r18;
	shl.b32 	%r20, %r35, 4;
	add.s32 	%r22, %r20, %r36;
	cvt.u64.u32 	%rd8, %r22;
	mov.u32 	%r40, 0;
	@%p3 bra 	LBB0_6;
// %bb.4:                               // %for.body3.preheader
                                        //   in Loop: Header=BB0_2 Depth=1
	mul.wide.u32 	%rd18, %r37, 4;
	add.s64 	%rd42, %rd3, %rd18;
	add.s64 	%rd22, %rd40, %rd6;
	mul.lo.s64 	%rd23, %rd22, 4128;
	add.s64 	%rd24, %rd2, %rd23;
	add.s64 	%rd25, %rd24, %rd8;
	shl.b64 	%rd26, %rd25, 2;
	add.s64 	%rd41, %rd15, %rd26;
	mov.u32 	%r40, 0;
LBB0_5:                                 // %for.body3
                                        //   Parent Loop BB0_2 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ld.global.f32 	%f12, [%rd41];
	ld.global.f32 	%f13, [%rd42+-4];
	fma.rn.f32 	%f14, %f12, %f13, %f23;
	ld.global.f32 	%f15, [%rd41+-4];
	ld.global.f32 	%f16, [%rd42];
	fma.rn.f32 	%f23, %f15, %f16, %f14;
	add.s32 	%r40, %r40, 2;
	add.s64 	%rd42, %rd42, 8;
	add.s64 	%rd41, %rd41, -8;
	setp.ne.s32 	%p4, %r2, %r40;
	@%p4 bra 	LBB0_5;
LBB0_6:                                 // %for.inc22.loopexit.unr-lcssa
                                        //   in Loop: Header=BB0_2 Depth=1
	@%p5 bra 	LBB0_8;
// %bb.7:                               // %for.inc22.loopexit.epilog-lcssa
                                        //   in Loop: Header=BB0_2 Depth=1
	cvt.u64.u32 	%rd19, %r38;
	sub.s64 	%rd20, %rd1, %rd19;
	add.s64 	%rd21, %rd20, %rd6;
	mul.lo.s64 	%rd7, %rd21, 4128;
	shl.b32 	%r5, %r38, 5;
	cvt.u64.u32 	%rd27, %r40;
	sub.s64 	%rd28, %rd2, %rd27;
	add.s64 	%rd29, %rd28, %rd8;
	add.s64 	%rd30, %rd29, %rd7;
	shl.b64 	%rd31, %rd30, 2;
	add.s64 	%rd32, %rd15, %rd31;
	ld.global.f32 	%f17, [%rd32];
	add.s32 	%r24, %r40, %r5;
	mul.wide.u32 	%rd33, %r24, 4;
	add.s64 	%rd34, %rd16, %rd33;
	ld.global.f32 	%f18, [%rd34];
	fma.rn.f32 	%f23, %f17, %f18, %f23;
	bra.uni 	LBB0_8;
LBB0_9:                                 // %for.end24
	shl.b32 	%r26, %r33, 4;
	add.s32 	%r28, %r26, %r34;
	mul.wide.u32 	%rd35, %r28, 4096;
	shl.b32 	%r30, %r35, 4;
	add.s32 	%r32, %r30, %r36;
	cvt.u64.u32 	%rd36, %r32;
	add.s64 	%rd37, %rd35, %rd36;
	shl.b64 	%rd38, %rd37, 2;
	add.s64 	%rd39, %rd17, %rd38;
	st.global.f32 	[%rd39], %f23;
	ret;
                                        // -- End function
}
